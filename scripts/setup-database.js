#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { config } from 'dotenv';
import { fileURLToPath } from 'url';
import { exec } from 'child_process';
import { promisify } from 'util';
import { createClient } from '@supabase/supabase-js';

const execAsync = promisify(exec);

// Get __dirname equivalent in ES modules
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

// Load environment variables
config({ path: '.env' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const supabaseServiceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl) {
  console.error('❌ Missing NEXT_PUBLIC_SUPABASE_URL in .env.local');
  process.exit(1);
}

// Create Supabase client for checking if tables exist
const supabase = supabaseServiceKey 
  ? createClient(supabaseUrl, supabaseServiceKey, {
      auth: {
        autoRefreshToken: false,
        persistSession: false,
      },
    })
  : null;

async function checkIfTablesExist() {
  if (!supabase) return false;
  
  try {
    // Try to query the events table
    const { data, error } = await supabase
      .from('events')
      .select('id')
      .limit(1);
    
    if (error && error.code === '42P01') {
      // Table doesn't exist
      return false;
    }
    
    if (!error) {
      // Table exists
      return true;
    }
    
    // Some other error
    return false;
  } catch (error) {
    return false;
  }
}

async function setupDatabase() {
  console.log('🚀 Supabase Database Setup Helper\n');

  try {
    // Check if tables already exist
    if (supabase) {
      const tablesExist = await checkIfTablesExist();
      if (tablesExist) {
        console.log('✅ Database tables already exist!\n');
        console.log('If you want to reset the database, delete the tables in Supabase first.');
        return;
      }
    }

    // Read SQL files
    const setupSql = fs.readFileSync(
      path.join(__dirname, '..', 'supabase', 'setup.sql'),
      'utf8',
    );
    const rlsSql = fs.readFileSync(
      path.join(__dirname, '..', 'supabase', 'rls-policies.sql'),
      'utf8',
    );

    // Combine all SQL into one file
    const combinedSql = `-- Supabase Setup SQL
-- Run this in your Supabase SQL editor
-- Generated by: npm run setup:db

${setupSql}

-- Row Level Security Policies
${rlsSql}`;

    // Save to a file for easy access
    const outputFile = path.join(__dirname, '..', 'database-setup.sql');
    fs.writeFileSync(outputFile, combinedSql);
    console.log(`✅ Created database-setup.sql file\n`);

    // Get the SQL editor URL
    const projectRef = supabaseUrl.match(/https:\/\/([^.]+)\.supabase\.co/)?.[1];
    const sqlEditorUrl = projectRef 
      ? `https://app.supabase.com/project/${projectRef}/sql/new`
      : supabaseUrl.replace('/rest/v1', '').replace('https://', 'https://app.') + '/sql/new';

    console.log('📋 To set up your database:\n');
    console.log('1. Open your Supabase SQL editor:');
    console.log(`   ${sqlEditorUrl}\n`);
    
    console.log('2. Copy and paste the SQL from database-setup.sql');
    console.log(`   Or copy from below:\n`);
    
    console.log('========== COPY EVERYTHING BELOW ==========\n');
    console.log(combinedSql);
    console.log('\n========== COPY EVERYTHING ABOVE ==========\n');
    
    console.log('3. Click "Run" in the SQL editor\n');

    // Try to open browser
    const platform = process.platform;
    let command;
    
    if (platform === 'darwin') {
      command = `open "${sqlEditorUrl}"`;
    } else if (platform === 'win32') {
      command = `start "${sqlEditorUrl}"`;
    } else {
      command = `xdg-open "${sqlEditorUrl}" 2>/dev/null || true`;
    }
    
    try {
      await execAsync(command);
      console.log('🌐 Opening Supabase SQL editor in your browser...');
    } catch (error) {
      // Browser opening failed, that's okay
    }

    console.log('\n💡 Note: Supabase doesn\'t allow direct SQL execution via API for security.');
    console.log('   This is why we need to use the SQL editor.\n');
    
    console.log('✨ Once you\'ve run the SQL, your database will be ready!');
  } catch (error) {
    console.error('\n❌ Error:', error.message);
    process.exit(1);
  }
}

// Run the setup
setupDatabase();
